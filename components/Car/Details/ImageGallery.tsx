import React, { useRef } from 'react';
import {
    View,
    Image,
    TouchableOpacity,
    ScrollView,
    StyleSheet,
    Dimensions,
    NativeScrollEvent,
    NativeSyntheticEvent
} from 'react-native';
import Entypo from "@expo/vector-icons/Entypo";




/**
 * üì∏ ImageGallery Component
 *
 * Composant React Native permettant d‚Äôafficher une galerie d‚Äôimages avec :
 * - un carrousel horizontal principal (d√©filement ou clic sur miniature),
 * - des indicateurs de pagination dynamiques,
 * - une liste de miniatures cliquables pour acc√©der directement √† une image.
 *
 * üîß Props :
 * ----------
 *¬µ @prop {string[]} [images] (optionnel)
 *     Liste des URL des images √† afficher.
 *     Si aucune liste n‚Äôest fournie, une image par d√©faut est utilis√©e.
 *
 ** @prop {number} selectedIndex (requis)
 *     Index de l‚Äôimage actuellement s√©lectionn√©e/visible.
 *     Sert √† d√©terminer quelle miniature est active et quel point de pagination est allum√©.
 *
 **@prop {(index: number) => void} onImageSelect (requis)
 *     Fonction appel√©e √† chaque changement d‚Äôimage (par scroll ou clic sur miniature).
 *     Elle permet au composant parent de synchroniser l‚Äô√©tat de la galerie.
 *
 * üß± Structure interne :
 * ----------------------
 * - ScrollView principal :
 *     Affiche les images en plein √©cran horizontalement scrollables.
 *     G√®re automatiquement les transitions entre les images.
 *
 * - Pagination (points indicateurs) :
 *     Petits cercles dynamiques affich√©s en bas, indiquant l‚Äôimage courante.
 *     Le point actif est √©largi/blanchi pour attirer l‚Äôattention.
 *
 * - Miniatures :
 *     Rang√©e horizontale d‚Äôimages miniatures affich√©e sous la pagination.
 *     Cliquer sur une miniature d√©clenche un scroll vers l‚Äôimage correspondante.
 *
 * ‚öôÔ∏è Fonctions internes :
 * -----------------------
 * handleScroll(event):
 *     - √âcoute l‚Äô√©v√©nement de d√©filement horizontal.
 *     - Calcule l‚Äôindex de l‚Äôimage visible √† partir du scroll offset.
 *     - Si l‚Äôimage visible change, appelle onImageSelect(index).
 *
 * scrollToIndex(index):
 *     - Fait d√©filer le ScrollView principal jusqu‚Äô√† l‚Äôimage √† l‚Äôindex donn√©.
 *     - Appelle onImageSelect pour d√©clencher la mise √† jour de l‚Äô√©tat.
 *
 * üì± Responsiveness :
 * -------------------
 * Le composant utilise les dimensions de l‚Äô√©cran (`Dimensions.get('window')`) pour adapter
 * la taille des images √† la largeur du device, garantissant une exp√©rience responsive.
 *
 * üé® Style :
 * ----------
 * - Les images principales occupent 100% de la largeur et hauteur disponibles.
 * - Les points de pagination sont centr√©s en bas.
 * - Les miniatures sont stylis√©es avec opacit√© variable selon la s√©lection.
 * - La miniature active a un contour blanc et est pleinement opaque.
 */





// D√©finition des propri√©t√©s attendues par le composant
interface ImageGalleryProps {
    images?: string[];          // tableau des URLs des images
    selectedIndex: number;      // Index de l'image actuellement s√©lectionn√©e
    onImageSelect: (index: number) => void; // Callback quand une image est s√©lectionn√©e
}

// On r√©cup√®re la largeur de l'√©cran pour un affichage plein largeur
const { width } = Dimensions.get('window');

export default function ImageGallery({
                                         images,
                                         selectedIndex,
                                         onImageSelect
                                     }: ImageGalleryProps) {
    // R√©f√©rence pour contr√¥ler le ScrollView principal
    const scrollRef = useRef<ScrollView>(null);

    // Si pas d'images fournies, on utilise une image par d√©faut
    const imageList = images && images.length > 0
        ? images
        : ['https://via.placeholder.com/400x250'];

    // G√®re le d√©filement horizontal pour d√©tecter l'image visible
    const handleScroll = (event: NativeSyntheticEvent<NativeScrollEvent>) => {
        const offsetX = event.nativeEvent.contentOffset.x;  //offsetX est la position actuelle du scrollView horizontal
        const index = Math.round(offsetX / width); // Calcule l'index de l'image visible en divisant l'index par la taille d'une image
        if (index !== selectedIndex) {
            onImageSelect(index); // met a jour l'index de l'image s√©lectionn√©e
        }
    };

    // Fait d√©filer vers une image sp√©cifique lorsque le user selectionne directement la miniature conrrespondante
    const scrollToIndex = (index: number) => {
        scrollRef.current?.scrollTo({
            x: index * width,  // Position horizontale √† atteindre
            animated: true    // animation de transition fluide pas brutale
        });
        onImageSelect(index); // Met √† jour la s√©lection en notifiant le composant parent
    };

    return (
        <View style={styles.container}>
            {/* ScrollView principal pour les images en plein √©cran */}
            <ScrollView
                ref={scrollRef}
                horizontal                 // D√©filement horizontal
                pagingEnabled             // Snap sur chaque image
                showsHorizontalScrollIndicator={false} // Cache la barre de d√©filement
                onScroll={handleScroll}  // √âcouteur de d√©filement
                scrollEventThrottle={16}  // Fr√©quence de rafra√Æchissement
                style={styles.scrollView}
            >
                {/* Affiche chaque image en plein √©cran */}
                {imageList.map((img, index) => (
                    <Image
                        key={index}
                        source={{ uri: img }}
                        style={styles.mainImage}
                        resizeMode="cover"
                    />

                ))}

            </ScrollView>


            {/* Indicateurs de position (points en bas) */}
            <View style={styles.pagination}>
                {imageList.map((_, index) => (
                    <View
                        key={index}
                        style={[
                            styles.dot,
                            selectedIndex === index && styles.activeDot // Met en surbrillance le point actif
                        ]}
                    />
                ))}

            </View>

            {/* Miniatures cliquables (uniquement si plusieurs images) */}
            {imageList.length > 1 && (
                <View style={styles.thumbnailContainer}>
                    <ScrollView
                        horizontal
                        showsHorizontalScrollIndicator={false}
                        style={styles.thumbnailList}
                    >
                        {imageList.map((item, index) => (
                            <TouchableOpacity
                                key={index}
                                onPress={() => scrollToIndex(index)}
                            >
                                <Image
                                    source={{ uri: item }}
                                    style={[
                                        styles.thumbnailImage,
                                        selectedIndex === index && styles.selectedThumbnail // Met en surbrillance la miniature active
                                    ]}
                                    resizeMode="cover"
                                />
                            </TouchableOpacity>
                        ))}
                    </ScrollView>

                </View>
            )}
        </View>
    );
}

// Styles CSS-in-JS
const styles = StyleSheet.create({
    container: {
        flex: 1,
        position: 'relative', // Permet le positionnement absolu des enfants
    },
    scrollView: {
        flex: 1,
    },
    mainImage: { //imgae principale
        width: width,        // prend toute la largeur de l'√©cran
        height: '100%',     // prend toute la hauteur disponible
    },
    pagination: { //les boutons de pagiantion
        position: 'absolute',
        bottom: 60,
        left: 0,
        right: 0,
        flexDirection: 'row',
        justifyContent: 'center', // Centre les points horizontalement
    },
    dot: { //boutons pour les points en bas
        height: 8,
        width: 8,
        borderRadius: 4,    // forme ronde
        backgroundColor: 'rgba(255, 255, 255, 0.5)', // Semi-transparent
        marginHorizontal: 4,
    },
    activeDot: { //pour le bouton actif
        backgroundColor: '#ffffff',
        width: 25,
        borderRadius: 4,
    },
    thumbnailContainer: {//le contenant des miniatures
        position: 'absolute',
        bottom: 20,
        left: 0,
        right: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.3)', // Fond semi-transparent
        paddingVertical: 8,
    },
    thumbnailList: {
        paddingHorizontal: 10,
    },
    thumbnailImage: { //pour les miniatures
        width: 50,
        height: 35,
        borderRadius: 6,
        marginHorizontal: 4,
        opacity: 0.5, // semi-transparent pour les miniatures non actives
    },
    selectedThumbnail: { //image selectionn√©e
        opacity: 1,    // Pleine opacit√© pour la miniature active
        borderWidth: 2,
        borderColor: '#818385', // Bordure blanche
    },
    first:{
        flexDirection: 'row',
        flex:1,
    },
});