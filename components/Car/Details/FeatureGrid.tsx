import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { FontAwesome5 } from '@expo/vector-icons';


/**
 * FeatureGrid ‚Äì Composant d'affichage de fonctionnalit√©s
 *
 * Ce composant React Native permet d'afficher une **grille de fonctionnalit√©s** repr√©sent√©es
 * par des ic√¥nes et des libell√©s. Chaque fonctionnalit√© peut √™tre **active** ou **inactive**,
 * ce qui est visuellement refl√©t√© par un changement de style (couleurs, arri√®re-plan, etc.).
 *
 * ## üîß Structure du composant
 * Le composant est structur√© comme suit :
 * - `FeatureGridProps` : Interface des propri√©t√©s attendues (props).
 * - `iconMap` : Dictionnaire interne associant chaque cl√© de fonctionnalit√© √† une ic√¥ne FontAwesome5.
 * - `renderFeatureItem()` : Fonction interne qui retourne une "carte" visuelle (ic√¥ne + texte) pour chaque fonctionnalit√©.
 * - `return` : La vue principale du composant, une `View` contenant toutes les fonctionnalit√©s affich√©es sous forme de grille responsive.
 *
 * ## üì• Props attendues
 * *@typedef FeatureGridProps
 * @property {Object.<string, boolean>} features
 * - Objet dont **chaque cl√© est un identifiant de fonctionnalit√©** (en snake_case),
 *   et **chaque valeur est un bool√©en** (`true` = actif, `false` = inactif).
 *
 * Exemple :
 * ```ts
 * features = {
 *   air_condition: true,
 *   bluetooth: false,
 *   gps: true
 * }
 * ```
 *
 * Les cl√©s doivent correspondre √† celles d√©finies dans le `iconMap` du composant,
 * faute de quoi une ic√¥ne par d√©faut (`check`) sera utilis√©e.
 *
 * ## üéØ R√¥le des √©l√©ments internes
 *
 * - `iconMap`: Permet de **lier une fonctionnalit√© √† une ic√¥ne FontAwesome5** (ex: `"gps"` ‚Üí `"map-marker-alt"`).
 * - `renderFeatureItem()`: G√©n√®re l'affichage visuel (ic√¥ne + libell√©) pour chaque fonctionnalit√©,
 *   avec un **style diff√©rent si la fonctionnalit√© est inactive**.
 * - `styles`: Ensemble de styles utilis√©s pour l‚Äôalignement, les couleurs, l'espacement, et la visibilit√© des √©l√©ments.
 *
 * ## üí° Exemple d‚Äôutilisation
 * ```tsx
 * <FeatureGrid
 *   features={{
 *     air_condition: true,
 *     usb_input: false,
 *     seat_belt: true,
 *     bluetooth: true
 *   }}
 * />
 * ```
 * Ce composant affichera 4 fonctionnalit√©s :
 * - Climatisation (active)
 * - Port USB (inactif)
 * - Ceinture (active)
 * - Bluetooth (active)
 *
 * ## üì¶ Retour
 * @returns {JSX.Element}
 * Une grille de fonctionnalit√©s visuellement repr√©sent√©e avec des ic√¥nes et du texte,
 * avec indication claire des fonctionnalit√©s actives/inactives.
 */




interface FeatureGridProps {
    features: { [key: string]: boolean };
}

export default function FeatureGrid({ features }: FeatureGridProps) {
    const iconMap: { [key: string]: string } = {
        air_condition: 'snowflake',
        usb_input: 'usb',
        seat_belt: 'shield-alt',
        audio_input: 'music',
        child_seat: 'baby',
        bluetooth: 'bluetooth-b',
        gps: 'map-marker-alt',
        luggage: 'suitcase',
        water: 'tint',
    };

    const renderFeatureItem = (feature: string, isActive: boolean) => (
        <View key={feature} style={[styles.featureItem, !isActive && styles.featureInactive]}>
            <FontAwesome5
                name={iconMap[feature] || 'check'}
                size={16}
                color={isActive ? '#60A5FA' : '#94A3B8'}
            />
            <Text style={[styles.featureText, !isActive && styles.featureTextInactive]}>
                {feature.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
            </Text>
        </View>
    );

    return (
        <View style={styles.container}>
            {Object.entries(features).map(([key, value]) =>
                renderFeatureItem(key, value)
            )}
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'space-between',
    },
    featureItem: {
        flexDirection: 'row',
        alignItems: 'center',
        width: '48%',
        marginBottom: 12,
        padding: 10,
        backgroundColor: '#EBF4FF',
        borderRadius: 10,
    },
    featureInactive: {
        backgroundColor: '#F8FAFC',
    },
    featureText: {
        marginLeft: 8,
        fontSize: 12,
        color: '#334155',
        fontWeight: '500',
    },
    featureTextInactive: {
        color: '#94A3B8',
    },
});