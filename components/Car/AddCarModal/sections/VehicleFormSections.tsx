import React from 'react';
import { View } from 'react-native';
import BasicInfoSection from './BasicInfoSection';
import EngineSection from './EngineSection';
import FeaturesSection from './FeaturesSection';
import DocumentsSection from "./DocumentSection";

/**
 * VehicleFormSections
 *
 * Composant principal qui regroupe et structure les diff√©rentes sections du
 * formulaire de v√©hicule : Informations de base, Moteur, Fonctionnalit√©s.
 *
 * Il est con√ßu pour √™tre utilis√© avec une biblioth√®que de gestion de formulaire
 * comme Formik, et il est optimis√© pour fonctionner avec une logique d'expansion
 * (collapse/expand) de sections.
 *
 * Ce composant sert de **container** logique et visuel aux sous-sections :
 * - `BasicInfoSection` : D√©tails g√©n√©raux du v√©hicule (marque, mod√®le, ann√©e, etc.)
 * - `EngineSection` : Informations li√©es au moteur (puissance, carburant, etc.)
 * - `FeaturesSection` : Options/fonctionnalit√©s disponibles (GPS, climatisation, etc.)
 *
 * @param {object} props - Propri√©t√©s n√©cessaires pour g√©rer le formulaire et l'affichage :
 *
 * - `values` (object) : Toutes les valeurs du formulaire (Formik state).
 * - `errors` (object) : Messages d‚Äôerreur pour chaque champ.
 * - `touched` (object) : Indicateurs des champs visit√©s (utile pour valider √† la sortie de champ).
 * - `handleChange` (function) : Fonction fournie par Formik pour modifier les valeurs des champs.
 * - `handleBlur` (function) : Fonction appel√©e lors de la perte de focus sur un champ.
 * - `setFieldValue` (function) : Fonction pour modifier manuellement un champ sp√©cifique.
 *
 * - `selectedBrand` (string) : Marque actuellement s√©lectionn√©e, utilis√©e dans `BasicInfoSection`.
 * - `setSelectedBrand` (function) : Fonction pour mettre √† jour la marque s√©lectionn√©e.
 *
 * - `expandedSections` (object) : Contient l‚Äô√©tat d‚Äôexpansion de chaque section (ex: `{ basic: true, engine: false, ... }`).
 * - `toggleSection` (function) : Fonction pour ouvrir/fermer une section sp√©cifique. Utilis√©e dans chaque `onToggle`.
 *
 * Ce composant permet une s√©paration claire des responsabilit√©s par section,
 * ce qui rend le formulaire plus lisible, modulaire et maintenable.
 * /**
 *  * ------------------------------------------------------------
 *  * üìÑ DOCUMENTATION : AJOUT D'UN NOUVEAU CHAMP AU FORMULAIRE
 *  * ------------------------------------------------------------
 *  *
 *  * Cette documentation d√©crit la proc√©dure compl√®te pour ajouter
 *  * un nouveau champ dans un formulaire React Native utilisant Formik.
 *  * Elle est valable pour n‚Äôimporte quel type de champ : texte, switch,
 *  * date, fichier, etc.
 *  *
 *  * ------------------------------------------------------------
 *  * üß© 1. D√©claration du champ dans initialValues
 *  * ------------------------------------------------------------
 *  * Dans le fichier contenant les valeurs initiales du formulaire,
 *  * ajouter une propri√©t√© correspondant au nouveau champ :
 *  *
 *  * Exemple :
 *  * const initialValues = {
 *  *   nom: '',
 *  *   marque: '',
 *  *   nouveauChamp: '', // <-- nouveau champ
 *  * };
 *  *
 *  * ------------------------------------------------------------
 *  * üß± 2. Ajout visuel dans une section du formulaire
 *  * ------------------------------------------------------------
 *  * Dans le composant qui repr√©sente la section du formulaire
 *  * (ex: BasicInfoSection.tsx), ajouter un √©l√©ment visuel pour ce champ :
 *  *
 *  * Exemple pour un champ texte :
 *  *
 *  * <Text style={styles.label}>Nouveau Champ</Text>
 *  * <TextInput
 *  *   style={styles.input}
 *  *   onChangeText={handleChange('nouveauChamp')}
 *  *   onBlur={handleBlur('nouveauChamp')}
 *  *   value={values.nouveauChamp}
 *  * />
 *  * {touched.nouveauChamp && errors.nouveauChamp && (
 *  *   <Text style={styles.error}>{errors.nouveauChamp}</Text>
 *  * )}
 *  *
 *  * Pour un autre type de champ (Picker, Switch, DocumentPicker, etc.),
 *  * adapter l‚Äô√©l√©ment d‚Äôinterface en cons√©quence.
 *  *
 *  * ------------------------------------------------------------
 *  * üì¶ 3. Passage des props Formik
 *  * ------------------------------------------------------------
 *  * Le composant de la section doit recevoir les props Formik n√©cessaires :
 *  *
 *  * const SectionX = ({
 *  *   values,
 *  *   errors,
 *  *   touched,
 *  *   handleChange,
 *  *   handleBlur,
 *  *   ...
 *  * }) => { ... }
 *  *
 *  * Cela garantit que le champ peut interagir correctement avec Formik.
 *  *
 *  * ------------------------------------------------------------
 *  * üìò 4. Ajout au sch√©ma de validation (Yup)
 *  * ------------------------------------------------------------
 *  * Si une validation est utilis√©e via Yup :
 *  *
 *  * const validationSchema = Yup.object().shape({
 *  *   nouveauChamp: Yup.string().required("Champ requis"),
 *  *   // adapter selon le type (string, number, boolean, etc.)
 *  * });
 *  *
 *  * ------------------------------------------------------------
 *  * üöÄ 5. Utilisation dans la soumission
 *  * ------------------------------------------------------------
 *  * Dans la fonction `onSubmit`, le champ est automatiquement inclus
 *  * dans l‚Äôobjet `values` :
 *  *
 *  * const handleSubmit = (values) => {
 *  *   console.log(values.nouveauChamp);
 *  *   // envoyer √† l‚ÄôAPI, traiter, etc.
 *  * };
 *  *
 *  * ------------------------------------------------------------
 *  * üß± 6. (Facultatif) Ajout dans une nouvelle section avec pliage
 *  * ------------------------------------------------------------
 *  * Si tu veux cr√©er une nouvelle section pour ce champ :
 *  * 1. Cr√©er un fichier ex: DocumentSection.tsx
 *  * 2. Int√©grer cette section dans `VehicleFormSections.tsx` :
 *  *
 *  * <DocumentSection
 *  *   values={values}
 *  *   handleChange={handleChange}
 *  *   handleBlur={handleBlur}
 *  *   setFieldValue={setFieldValue}
 *  *   isExpanded={expandedSections.documents}
 *  *   onToggle={() => toggleSection('documents')}
 *  * />
 *  *
 *  * 3. Ajouter "documents: true/false" dans `expandedSections`
 *  *    pour contr√¥ler son affichage.
 *  *
 *  * ------------------------------------------------------------
 *  * üß™ Exemple : champ "couleur"
 *  * ------------------------------------------------------------
 *  * // initialValues :
 *  * couleur: '',
 *  *
 *  * // validationSchema :
 *  * couleur: Yup.string().required('Couleur obligatoire'),
 *  *
 *  * // dans l‚Äôinterface :
 *  * <TextInput
 *  *   onChangeText={handleChange('couleur')}
 *  *   onBlur={handleBlur('couleur')}
 *  *   value={values.couleur}
 *  * />
 *  *
 *  * ------------------------------------------------------------
 *  * üîÅ R√©sum√© des √©tapes
 *  * ------------------------------------------------------------
 *  * 1. D√©clarer dans initialValues
 *  * 2. Ajouter l‚Äô√©l√©ment visuel dans l‚ÄôUI
 *  * 3. Passer les props Formik (values, errors, etc.)
 *  * 4. Ajouter dans Yup si utilis√©
 *  * 5. G√©rer dans la fonction de soumission
 *  * 6. (Optionnel) Cr√©er une section d√©di√©e
 *  *
 *  */






// @ts-ignore
const VehicleFormSections = ({values, errors, touched, handleChange, handleBlur, setFieldValue, selectedBrand, setSelectedBrand, expandedSections, toggleSection
                             }: object) => {
    return (
        <View>
            <BasicInfoSection
                values={values}
                errors={errors}
                touched={touched}
                handleChange={handleChange}
                handleBlur={handleBlur}
                setFieldValue={setFieldValue}
                selectedBrand={selectedBrand}
                setSelectedBrand={setSelectedBrand}
                isExpanded={expandedSections.basic}
                onToggle={() => toggleSection('basic')}
            />

            <EngineSection
                values={values}
                handleChange={handleChange}
                handleBlur={handleBlur}
                setFieldValue={setFieldValue}
                isExpanded={expandedSections.engine}
                onToggle={() => toggleSection('engine')}
            />

            <FeaturesSection
                values={values}
                setFieldValue={setFieldValue}
                isExpanded={expandedSections.features}
                onToggle={() => toggleSection('features')}
            />

            <DocumentsSection
                values={values}
                errors={errors}
                touched={touched}
                handleChange={handleChange}
                handleBlur={handleBlur}
                setFieldValue={setFieldValue}
                isExpanded={expandedSections.documents}
                onToggle={() => toggleSection('documents')}
            />
        </View>
    );
};

export default VehicleFormSections;
